{
	"info": {
		"_postman_id": "8f50335e-6a23-49c3-9915-63b2b262264f",
		"name": "async",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "384681"
	},
	"item": [
		{
			"name": "submit job",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"it should return a uuid\", function(){ ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.uuid).to.not.be.empty;",
							"});",
							"",
							"pm.environment.set(\"uuid\", jsonData.uuid);",
							"",
							"pm.test(\"response is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"urls\":[\"https://github.com/satori/go.uuid\"]}"
				},
				"url": {
					"raw": "{{host}}/v1/analyze",
					"host": [
						"{{host}}"
					],
					"path": [
						"v1",
						"analyze"
					]
				},
				"description": "basic post\n"
			},
			"response": []
		},
		{
			"name": "submit job bad url",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"it should return a uuid\", function(){ ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"response is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"urls\":[\"https://github.com/kitplummer/blah\", \"blah\"]}"
				},
				"url": {
					"raw": "{{host}}/v1/analyze",
					"host": [
						"{{host}}"
					],
					"path": [
						"v1",
						"analyze"
					]
				},
				"description": "basic post\n"
			},
			"response": []
		},
		{
			"name": "submit job no urls in body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"it should return a uuid\", function(){ ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"response is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/v1/analyze",
					"host": [
						"{{host}}"
					],
					"path": [
						"v1",
						"analyze"
					]
				},
				"description": "basic post\n"
			},
			"response": []
		},
		{
			"name": "trigger-trending.sh",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/v1/gh_trending/process",
					"host": [
						"{{host}}"
					],
					"path": [
						"v1",
						"gh_trending",
						"process"
					]
				},
				"description": "basic post\n"
			},
			"response": []
		},
		{
			"name": "get report",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"it should return a complete state\", function(){ ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.state).to.eql(\"complete\")",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){}, [3000]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/v1/analyze/{{uuid}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"v1",
						"analyze",
						"{{uuid}}"
					]
				},
				"description": "basic post\n"
			},
			"response": []
		},
		{
			"name": "get report no uuid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response is 200\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"it should return a complete state\", function(){ ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.eql(\"UUID not provided or found.\")",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){}, [3000]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/v1/analyze/",
					"host": [
						"{{host}}"
					],
					"path": [
						"v1",
						"analyze",
						""
					]
				},
				"description": "basic post\n"
			},
			"response": []
		},
		{
			"name": "get report invalid uuid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response is 200\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"it should return a complete state\", function(){ ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.eql(\"invalid UUID provided, no job found.\")",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){}, [3000]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/v1/analyze/blah",
					"host": [
						"{{host}}"
					],
					"path": [
						"v1",
						"analyze",
						"blah"
					]
				},
				"description": "basic post\n"
			},
			"response": []
		},
		{
			"name": "submit job mutli",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"it should return a uuid\", function(){ ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.uuid).to.not.be.empty;",
							"});",
							"",
							"pm.environment.set(\"uuid\", jsonData.uuid);",
							"",
							"pm.test(\"response is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"urls\":[\"https://github.com/satori/go.uuid\", \"https://github.com/gtri/lowendinsight\"]}"
				},
				"url": {
					"raw": "{{host}}/v1/analyze",
					"host": [
						"{{host}}"
					],
					"path": [
						"v1",
						"analyze"
					]
				},
				"description": "basic post\n"
			},
			"response": []
		},
		{
			"name": "get report multi",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"it should return a complete state\", function(){ ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.state).to.eql(\"complete\")",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){}, [3000]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/v1/analyze/{{uuid}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"v1",
						"analyze",
						"{{uuid}}"
					]
				},
				"description": "basic post\n"
			},
			"response": []
		}
	]
}